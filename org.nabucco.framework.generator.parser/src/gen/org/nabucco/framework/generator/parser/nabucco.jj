//
// Generated by JTB 1.3.2
//

options {
   LOOKAHEAD = 1;
   DEBUG_PARSER = false;
   ERROR_REPORTING = false;
   STATIC = false;
}

PARSER_BEGIN(NabuccoParser)
package org.nabucco.framework.generator.parser;

import org.nabucco.framework.generator.parser.syntaxtree.*;
import java.util.Vector;


public class NabuccoParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(NabuccoParser)

SKIP :
{
   <EOL: "\n" | "\r" | "\r\n">
   | <SPACECHAR: " " | "\t" | "\f">
}

TOKEN :
{
   <UNDERSCORE_CHAR: "_">
   | <HASH_CHAR: "#">
   | <LPAREN_CHAR: "(">
   | <RPAREN_CHAR: ")">
   | <LBRACE_CHAR: "{">
   | <RBRACE_CHAR: "}">
   | <MINUS_CHAR: "-">
   | <PLUS_CHAR: "+">
   | <ASTERISK_CHAR: "*">
   | <SLASH_CHAR: "/">
   | <EQUAL_CHAR: "=">
   | <GT_CHAR: ">">
   | <LT_CHAR: "<">
   | <GTE_CHAR: ">=">
   | <LTE_CHAR: "<=">
   | <LBRACKET_CHAR: "[">
   | <RBRACKET_CHAR: "]">
   | <PERCENT_CHAR: "%">
   | <DOT_CHAR: ".">
   | <COLON_CHAR: ":">
   | <SEMICOLON_CHAR: ";">
   | <SINGLEQUOTE_CHAR: "'">
   | <PIPE_CHAR: "|">
   | <COMMA_CHAR: ",">
   | <EXCLAMATION_CHAR: "!">
   | <QUESTIONMARK_CHAR: "?">
   | <TILDE_CHAR: "~">
   | <DOLLAR_CHAR: "$">
   | <AND_CHAR: "&">
   | <#UMLAUTE: ["\u00c4", "\u00d6", "\u00dc", "\u00e4", "\u00f6", "\u00fc"]>
}

TOKEN :
{
   <APPLICATION: "Application">
   | <COMPONENT: "Component">
   | <ADAPTER: "Adapter">
   | <BASETYPE: "Basetype">
   | <DATATYPE: "Datatype">
   | <ENUMERATION: "Enumeration">
   | <SERVICE: "Service">
   | <EXCEPTION: "Exception">
   | <MESSAGE: "Message">
   | <CONNECTOR: "Connector">
   | <SERVICELINK: "ServiceLink">
   | <EDITVIEW: "EditView">
   | <LISTVIEW: "ListView">
   | <SEARCHVIEW: "SearchView">
   | <COMMAND: "Command">
   | <PACKAGE: "package">
   | <IMPORT: "import">
   | <EXTENDS: "extends">
   | <VOID: "void">
   | <THROWS: "throws">
   | <PUBLIC: "public">
   | <PROTECTED: "protected">
   | <PRIVATE: "private">
   | <ABSTRACT: "abstract">
   | <PERSISTENT: "persistent">
   | <TRANSIENT: "transient">
   | <PARAMETER: "Parameter">
}

TOKEN :
{
   <LABELED_INPUT_FIELD: "LabeledInputField">
   | <LABELED_COMBO_BOX: "LabeledComboBox">
   | <LABELED_PICKER: "LabeledPicker">
   | <LABELED_LIST_PICKER: "LabeledListPicker">
   | <INPUT_FIELD: "InputField">
   | <COMBO_BOX: "ComboBox">
   | <PICKER: "Picker">
   | <LIST_PICKER: "ListPicker">
   | <COLUMN: "Column">
}

TOKEN :
{
   <SIMPLE_DATA_TYPE: "String" | "Byte" | "Character" | "Integer" | "Long" | "Float" | "Double" | "Boolean">
}

TOKEN :
{
   <#DIGIT: ["0"-"9"]>
   | <#LC_SEQUENCE: (["a"-"z"])+>
   | <#HC_SEQUENCE: (["A"-"Z", "_"])+>
   | <#LCUC_SEQUENCE: ["a"-"z"] (["a"-"z"] | ["A"-"Z"])+>
   | <#UCLC_SEQUENCE: ["A"-"Z"] (["a"-"z"] | ["A"-"Z"])+>
   | <NAME_IDENTIFIER: <LCUC_SEQUENCE>>
   | <CONSTANT_IDENTIFIER: <HC_SEQUENCE>>
   | <PACKAGE_IDENTIFIER: <LC_SEQUENCE> (<DOT_CHAR> <LC_SEQUENCE>)*>
   | <UNQUALIFIED_TYPE_NAME: <UCLC_SEQUENCE>>
   | <QUALIFIED_TYPE_NAME: <PACKAGE_IDENTIFIER> <DOT_CHAR> <UNQUALIFIED_TYPE_NAME>>
   | <MULTIPLICITY: <LBRACKET_CHAR> ["0"-"1"] (<DOT_CHAR> <DOT_CHAR> ("1" | <ASTERISK_CHAR>))? <RBRACKET_CHAR>>
}

MORE :
{
   "/*" : IN_COMMENT
}

<IN_COMMENT> MORE :
{
   <~[]>
}

<IN_COMMENT> SKIP :
{
   "*/" : DEFAULT
}

SKIP :
{
   <START_ANNOTATION: "@"> : IN_ANNOTATION
}

<IN_ANNOTATION> SKIP :
{
   " "
   | "\t"
   | "\f"
}

<IN_ANNOTATION> TOKEN :
{
   <#ANNOTATION_PARAM: ~["\n", "\r"]>
   | <ANNOTATION: (<ANNOTATION_PARAM>)+>
}

<IN_ANNOTATION> SKIP :
{
   <END_ANNOTATION: "\n" | "\r" | "\r\n"> : DEFAULT
}

NabuccoUnit NabuccoUnit() :
{
   PackageDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   ImportDeclaration n2;
   NabuccoStatement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=PackageDeclaration()
   (
      n2=ImportDeclaration()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   n3=NabuccoStatement()
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new NabuccoUnit(n0,n1,n3,n4); }
}

PackageDeclaration PackageDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<PACKAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PACKAGE_IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SEMICOLON_CHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new PackageDeclaration(n0,n2,n4); }
}

ImportDeclaration ImportDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<IMPORT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<QUALIFIED_TYPE_NAME> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<SEMICOLON_CHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ImportDeclaration(n0,n2,n4); }
}

AnnotationDeclaration AnnotationDeclaration() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeToken n1;
   Token n2;

   
}
{
   (
      n2=<ANNOTATION> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new AnnotationDeclaration(n0); }
}

ExtensionDeclaration ExtensionDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<EXTENDS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<UNQUALIFIED_TYPE_NAME> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<QUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new ExtensionDeclaration(n0,n2); }
}

NabuccoStatement NabuccoStatement() :
{
   NodeChoice n0;
   ApplicationStatement n1;
   ComponentStatement n2;
   AdapterStatement n3;
   DatatypeStatement n4;
   BasetypeStatement n5;
   EnumerationStatement n6;
   ExceptionStatement n7;
   ServiceStatement n8;
   MessageStatement n9;
   EditViewStatement n10;
   ListViewStatement n11;
   SearchViewStatement n12;
   CommandStatement n13;

   
}
{
   (
      (
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <APPLICATION>)
         n1=ApplicationStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <COMPONENT>)
         n2=ComponentStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <ADAPTER>)
         n3=AdapterStatement()
         { n0 = new NodeChoice(n3, 2); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> [ <ABSTRACT> ] <DATATYPE>)
         n4=DatatypeStatement()
         { n0 = new NodeChoice(n4, 3); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <BASETYPE>)
         n5=BasetypeStatement()
         { n0 = new NodeChoice(n5, 4); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <ENUMERATION>)
         n6=EnumerationStatement()
         { n0 = new NodeChoice(n6, 5); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <EXCEPTION>)
         n7=ExceptionStatement()
         { n0 = new NodeChoice(n7, 6); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> [ <ABSTRACT> ] <SERVICE>)
         n8=ServiceStatement()
         { n0 = new NodeChoice(n8, 7); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <MESSAGE>)
         n9=MessageStatement()
         { n0 = new NodeChoice(n9, 8); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <EDITVIEW>)
         n10=EditViewStatement()
         { n0 = new NodeChoice(n10, 9); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <LISTVIEW>)
         n11=ListViewStatement()
         { n0 = new NodeChoice(n11, 10); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <SEARCHVIEW>)
         n12=SearchViewStatement()
         { n0 = new NodeChoice(n12, 11); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <COMMAND>)
         n13=CommandStatement()
         { n0 = new NodeChoice(n13, 12); }
      )
      
   )
   
   { return new NabuccoStatement(n0); }
}

ApplicationStatement ApplicationStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   ApplicationPropertyDeclaration n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<APPLICATION> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=ApplicationPropertyDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12=<RBRACE_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ApplicationStatement(n0,n1,n3,n5,n7,n9,n11); }
}

ComponentStatement ComponentStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   ComponentPropertyDeclaration n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<COMPONENT> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=ComponentPropertyDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12=<RBRACE_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ComponentStatement(n0,n1,n3,n5,n7,n9,n11); }
}

AdapterStatement AdapterStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   ServiceDeclaration n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<ADAPTER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=ServiceDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12=<RBRACE_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new AdapterStatement(n0,n1,n3,n5,n7,n9,n11); }
}

DatatypeStatement DatatypeStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ExtensionDeclaration n11;
   NodeToken n12;
   Token n13;
   NodeListOptional n14 = new NodeListOptional();
   PropertyDeclaration n15;
   NodeToken n16;
   Token n17;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n5=<ABSTRACT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7=<DATATYPE> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<UNQUALIFIED_TYPE_NAME> { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      n11=ExtensionDeclaration()
      { n10.addNode(n11); }
   )?
   n13=<LBRACE_CHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
   (
      n15=PropertyDeclaration()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17=<RBRACE_CHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new DatatypeStatement(n0,n1,n3,n6,n8,n10,n12,n14,n16); }
}

BasetypeStatement BasetypeStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   ExtensionDeclaration n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<BASETYPE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=ExtensionDeclaration()
      { n7.addNode(n8); }
   )?
   n10=<LBRACE_CHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=<RBRACE_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new BasetypeStatement(n0,n1,n3,n5,n7,n9,n11); }
}

EnumerationStatement EnumerationStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   EnumerationLiteralDeclaration n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<ENUMERATION> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=EnumerationLiteralDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12=<RBRACE_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new EnumerationStatement(n0,n1,n3,n5,n7,n9,n11); }
}

ServiceStatement ServiceStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   ExtensionDeclaration n11;
   NodeToken n12;
   Token n13;
   NodeListOptional n14 = new NodeListOptional();
   ServicePropertyDeclaration n15;
   NodeToken n16;
   Token n17;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n5=<ABSTRACT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7=<SERVICE> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<UNQUALIFIED_TYPE_NAME> { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      n11=ExtensionDeclaration()
      { n10.addNode(n11); }
   )?
   n13=<LBRACE_CHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
   (
      n15=ServicePropertyDeclaration()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17=<RBRACE_CHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new ServiceStatement(n0,n1,n3,n6,n8,n10,n12,n14,n16); }
}

MessageStatement MessageStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   PropertyDeclaration n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<MESSAGE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=PropertyDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12=<RBRACE_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new MessageStatement(n0,n1,n3,n5,n7,n9,n11); }
}

ExceptionStatement ExceptionStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   ExtensionDeclaration n8;
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   ExceptionParameterDeclaration n12;
   NodeToken n13;
   Token n14;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<EXCEPTION> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=ExtensionDeclaration()
      { n7.addNode(n8); }
   )?
   n10=<LBRACE_CHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=ExceptionParameterDeclaration()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   n14=<RBRACE_CHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ExceptionStatement(n0,n1,n3,n5,n7,n9,n11,n13); }
}

ConnectorStatement ConnectorStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   ConnectorPropertyDeclaration n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<CONNECTOR> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=ConnectorPropertyDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12=<RBRACE_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ConnectorStatement(n0,n1,n3,n5,n7,n9,n11); }
}

EditViewStatement EditViewStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   DatatypeDeclaration n11;
   WidgetDeclaration n12;
   NodeToken n13;
   Token n14;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<EDITVIEW> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      (
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <DATATYPE>)
         n11=DatatypeDeclaration()
         { n10 = new NodeChoice(n11, 0); }
      |
         n12=WidgetDeclaration()
         { n10 = new NodeChoice(n12, 1); }
      )
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n14=<RBRACE_CHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new EditViewStatement(n0,n1,n3,n5,n7,n9,n13); }
}

ListViewStatement ListViewStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   DatatypeDeclaration n11;
   ColumnDeclaration n12;
   NodeToken n13;
   Token n14;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LISTVIEW> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      (
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <DATATYPE>)
         n11=DatatypeDeclaration()
         { n10 = new NodeChoice(n11, 0); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <COLUMN>)
         n12=ColumnDeclaration()
         { n10 = new NodeChoice(n12, 1); }
      )
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n14=<RBRACE_CHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ListViewStatement(n0,n1,n3,n5,n7,n9,n13); }
}

SearchViewStatement SearchViewStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeChoice n10;
   DatatypeDeclaration n11;
   WidgetDeclaration n12;
   NodeToken n13;
   Token n14;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SEARCHVIEW> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      (
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <DATATYPE>)
         n11=DatatypeDeclaration()
         { n10 = new NodeChoice(n11, 0); }
      |
         n12=WidgetDeclaration()
         { n10 = new NodeChoice(n12, 1); }
      )
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n14=<RBRACE_CHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new SearchViewStatement(n0,n1,n3,n5,n7,n9,n13); }
}

CommandStatement CommandStatement() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   ViewDeclaration n10;
   MethodDeclaration n11;
   NodeToken n12;
   Token n13;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<COMMAND> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<UNQUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<LBRACE_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      LOOKAHEAD(AnnotationDeclaration() <PRIVATE> ( <EDITVIEW> | <LISTVIEW> | <SEARCHVIEW> ))
      n10=ViewDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n11=MethodDeclaration()
   n13=<RBRACE_CHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new CommandStatement(n0,n1,n3,n5,n7,n9,n11,n12); }
}

ApplicationPropertyDeclaration ApplicationPropertyDeclaration() :
{
   NodeChoice n0;
   ComponentDeclaration n1;
   ConnectorStatement n2;

   
}
{
   (
      (
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <COMPONENT>)
         n1=ComponentDeclaration()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PRIVATE> ) <CONNECTOR>)
         n2=ConnectorStatement()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new ApplicationPropertyDeclaration(n0); }
}

ComponentPropertyDeclaration ComponentPropertyDeclaration() :
{
   NodeChoice n0;
   ComponentDatatypeDeclaration n1;
   EnumerationDeclaration n2;
   ServiceDeclaration n3;
   ComponentDeclaration n4;

   
}
{
   (
      (
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <PERSISTENT> ] <DATATYPE>)
         n1=ComponentDatatypeDeclaration()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <ENUMERATION>)
         n2=EnumerationDeclaration()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <SERVICE>)
         n3=ServiceDeclaration()
         { n0 = new NodeChoice(n3, 2); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <COMPONENT>)
         n4=ComponentDeclaration()
         { n0 = new NodeChoice(n4, 3); }
      )
      
   )
   
   { return new ComponentPropertyDeclaration(n0); }
}

ServicePropertyDeclaration ServicePropertyDeclaration() :
{
   NodeChoice n0;
   CustomDeclaration n1;
   ServiceDeclaration n2;
   MethodDeclaration n3;

   
}
{
   (
      (
         LOOKAHEAD(AnnotationDeclaration() <PRIVATE> <UNQUALIFIED_TYPE_NAME>)
         n1=CustomDeclaration()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <SERVICE>)
         n2=ServiceDeclaration()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(AnnotationDeclaration() <PUBLIC> ( <VOID> | <UNQUALIFIED_TYPE_NAME> ) <NAME_IDENTIFIER> <LPAREN_CHAR>)
         n3=MethodDeclaration()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
   { return new ServicePropertyDeclaration(n0); }
}

ConnectorPropertyDeclaration ConnectorPropertyDeclaration() :
{
   NodeChoice n0;
   DatatypeDeclaration n1;
   ServiceLinkDeclaration n2;

   
}
{
   (
      (
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <DATATYPE>)
         n1=DatatypeDeclaration()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <SERVICELINK>)
         n2=ServiceLinkDeclaration()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
   { return new ConnectorPropertyDeclaration(n0); }
}

PropertyDeclaration PropertyDeclaration() :
{
   NodeChoice n0;
   BasetypeDeclaration n1;
   DatatypeDeclaration n2;
   EnumerationDeclaration n3;

   
}
{
   (
      (
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <BASETYPE>)
         n1=BasetypeDeclaration()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <DATATYPE>)
         n2=DatatypeDeclaration()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <ENUMERATION>)
         n3=EnumerationDeclaration()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
   { return new PropertyDeclaration(n0); }
}

CustomDeclaration CustomDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   n9=<UNQUALIFIED_TYPE_NAME> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<MULTIPLICITY> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<NAME_IDENTIFIER> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<SEMICOLON_CHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new CustomDeclaration(n0,n1,n8,n10,n12,n14); }
}

BasetypeDeclaration BasetypeDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   (
      n10=<TRANSIENT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n12=<BASETYPE> { n11 = JTBToolkit.makeNodeToken(n12); }
   n14=<UNQUALIFIED_TYPE_NAME> { n13 = JTBToolkit.makeNodeToken(n14); }
   n16=<MULTIPLICITY> { n15 = JTBToolkit.makeNodeToken(n16); }
   n18=<NAME_IDENTIFIER> { n17 = JTBToolkit.makeNodeToken(n18); }
   n20=<SEMICOLON_CHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new BasetypeDeclaration(n0,n1,n8,n11,n13,n15,n17,n19); }
}

ComponentDatatypeDeclaration ComponentDatatypeDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   (
      n10=<PERSISTENT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n12=<DATATYPE> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      (
         n15=<QUALIFIED_TYPE_NAME> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n17=<UNQUALIFIED_TYPE_NAME> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13 = new NodeChoice(n16, 1); }
      )
      
   )
   n19=<MULTIPLICITY> { n18 = JTBToolkit.makeNodeToken(n19); }
   n21=<NAME_IDENTIFIER> { n20 = JTBToolkit.makeNodeToken(n21); }
   n23=<SEMICOLON_CHAR> { n22 = JTBToolkit.makeNodeToken(n23); }
   
   { return new ComponentDatatypeDeclaration(n0,n1,n8,n11,n13,n18,n20,n22); }
}

ConnectorDeclaration ConnectorDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   n9=<CONNECTOR> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<UNQUALIFIED_TYPE_NAME> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<NAME_IDENTIFIER> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<SEMICOLON_CHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new ConnectorDeclaration(n0,n1,n8,n10,n12,n14); }
}

ServiceLinkDeclaration ServiceLinkDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SERVICELINK> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<QUALIFIED_TYPE_NAME> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<DOT_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   n10=<NAME_IDENTIFIER> { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=<LPAREN_CHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   n14=<RPAREN_CHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
   n16=<SEMICOLON_CHAR> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new ServiceLinkDeclaration(n0,n1,n3,n5,n7,n9,n11,n13,n15); }
}

DatatypeDeclaration DatatypeDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   (
      n10=<TRANSIENT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n12=<DATATYPE> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      (
         n15=<QUALIFIED_TYPE_NAME> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n17=<UNQUALIFIED_TYPE_NAME> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13 = new NodeChoice(n16, 1); }
      )
      
   )
   n19=<MULTIPLICITY> { n18 = JTBToolkit.makeNodeToken(n19); }
   n21=<NAME_IDENTIFIER> { n20 = JTBToolkit.makeNodeToken(n21); }
   n23=<SEMICOLON_CHAR> { n22 = JTBToolkit.makeNodeToken(n23); }
   
   { return new DatatypeDeclaration(n0,n1,n8,n11,n13,n18,n20,n22); }
}

EnumerationDeclaration EnumerationDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   (
      n10=<TRANSIENT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n12=<ENUMERATION> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      (
         n15=<QUALIFIED_TYPE_NAME> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n17=<UNQUALIFIED_TYPE_NAME> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13 = new NodeChoice(n16, 1); }
      )
      
   )
   n19=<MULTIPLICITY> { n18 = JTBToolkit.makeNodeToken(n19); }
   n21=<NAME_IDENTIFIER> { n20 = JTBToolkit.makeNodeToken(n21); }
   n23=<SEMICOLON_CHAR> { n22 = JTBToolkit.makeNodeToken(n23); }
   
   { return new EnumerationDeclaration(n0,n1,n8,n11,n13,n18,n20,n22); }
}

EnumerationLiteralDeclaration EnumerationLiteralDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=AnnotationDeclaration()
   n2=<CONSTANT_IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new EnumerationLiteralDeclaration(n0,n1); }
}

ExceptionParameterDeclaration ExceptionParameterDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PARAMETER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ExceptionParameterDeclaration(n0,n1,n3,n5,n7); }
}

ComponentDeclaration ComponentDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   n9=<COMPONENT> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<UNQUALIFIED_TYPE_NAME> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<NAME_IDENTIFIER> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<SEMICOLON_CHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new ComponentDeclaration(n0,n1,n8,n10,n12,n14); }
}

ServiceDeclaration ServiceDeclaration() :
{
   AnnotationDeclaration n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   n0=AnnotationDeclaration()
   (
      (
         n3=<PUBLIC> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<PROTECTED> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<PRIVATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      
   )
   n9=<SERVICE> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<UNQUALIFIED_TYPE_NAME> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<SEMICOLON_CHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new ServiceDeclaration(n0,n1,n8,n10,n12); }
}

MethodDeclaration MethodDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   ParameterList n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   MethodBody n27;
   NodeToken n28;
   Token n29;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PUBLIC> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      (
         n5=<VOID> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<UNQUALIFIED_TYPE_NAME> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      
   )
   n9=<NAME_IDENTIFIER> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<LPAREN_CHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=ParameterList()
   n14=<RPAREN_CHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
   (
      { n16 = new NodeSequence(2); }
      n18=<THROWS> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      n20=<UNQUALIFIED_TYPE_NAME> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n16.addNode(n19); }
      { n15.addNode(n16); }
   )?
   (
      (
         n23=<SEMICOLON_CHAR> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21 = new NodeChoice(n22, 0); }
      |
         { n24 = new NodeSequence(3); }
         n26=<LBRACE_CHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         n27=MethodBody()
         { n24.addNode(n27); }
         n29=<RBRACE_CHAR> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n24.addNode(n28); }
         { n21 = new NodeChoice(n24, 1); }
      )
      
   )
   
   { return new MethodDeclaration(n0,n1,n3,n8,n10,n12,n13,n15,n21); }
}

ParameterList ParameterList() :
{
   NodeListOptional n0 = new NodeListOptional();
   Parameter n1;

   
}
{
   (
      n1=Parameter()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new ParameterList(n0); }
}

Parameter Parameter() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<COMMA_CHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<UNQUALIFIED_TYPE_NAME> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Parameter(n0,n3,n5); }
}

MethodBody MethodBody() :
{
   Block n0;

   
}
{
   n0=Block()
   
   { return new MethodBody(n0); }
}

JAVACODE
Block Block()
{
   Token tok;
   StringBuffer buffer = new StringBuffer();
   while ( getToken(1) != null )
   {
      tok = getToken(1);
      if ( tok.kind == RBRACE_CHAR )
      {
         break;
      }
      if ( buffer.length() != 0 )
      {
         buffer.append(' ');
      }
      buffer.append(tok.image);
      getNextToken();
   }
   return new Block(buffer.toString());
}

ViewDeclaration ViewDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      (
         n5=<EDITVIEW> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<LISTVIEW> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      |
         n9=<SEARCHVIEW> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3 = new NodeChoice(n8, 2); }
      )
      
   )
   n11=<UNQUALIFIED_TYPE_NAME> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<NAME_IDENTIFIER> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<SEMICOLON_CHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new ViewDeclaration(n0,n1,n3,n10,n12,n14); }
}

WidgetDeclaration WidgetDeclaration() :
{
   NodeChoice n0;
   LabeledInputFieldDeclaration n1;
   InputFieldDeclaration n2;
   LabeledPickerDeclaration n3;
   PickerDeclaration n4;
   LabeledListPickerDeclaration n5;
   ListPickerDeclaration n6;
   LabeledComboBoxDeclaration n7;
   ComboBoxDeclaration n8;

   
}
{
   (
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <LABELED_INPUT_FIELD>)
      n1=LabeledInputFieldDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <INPUT_FIELD>)
      n2=InputFieldDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <LABELED_PICKER>)
      n3=LabeledPickerDeclaration()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <PICKER>)
      n4=PickerDeclaration()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <LABELED_LIST_PICKER>)
      n5=LabeledListPickerDeclaration()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <LIST_PICKER>)
      n6=ListPickerDeclaration()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <LABELED_COMBO_BOX>)
      n7=LabeledComboBoxDeclaration()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(AnnotationDeclaration() ( <PRIVATE> ) <COMBO_BOX>)
      n8=ComboBoxDeclaration()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new WidgetDeclaration(n0); }
}

LabeledInputFieldDeclaration LabeledInputFieldDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LABELED_INPUT_FIELD> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new LabeledInputFieldDeclaration(n0,n1,n3,n5,n7); }
}

InputFieldDeclaration InputFieldDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<INPUT_FIELD> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new InputFieldDeclaration(n0,n1,n3,n5,n7); }
}

LabeledPickerDeclaration LabeledPickerDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LABELED_PICKER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new LabeledPickerDeclaration(n0,n1,n3,n5,n7); }
}

PickerDeclaration PickerDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<PICKER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PickerDeclaration(n0,n1,n3,n5,n7); }
}

LabeledListPickerDeclaration LabeledListPickerDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LABELED_LIST_PICKER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new LabeledListPickerDeclaration(n0,n1,n3,n5,n7); }
}

ListPickerDeclaration ListPickerDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LIST_PICKER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ListPickerDeclaration(n0,n1,n3,n5,n7); }
}

LabeledComboBoxDeclaration LabeledComboBoxDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LABELED_COMBO_BOX> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new LabeledComboBoxDeclaration(n0,n1,n3,n5,n7); }
}

ComboBoxDeclaration ComboBoxDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<COMBO_BOX> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ComboBoxDeclaration(n0,n1,n3,n5,n7); }
}

ColumnDeclaration ColumnDeclaration() :
{
   AnnotationDeclaration n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=AnnotationDeclaration()
   n2=<PRIVATE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<COLUMN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<NAME_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<SEMICOLON_CHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ColumnDeclaration(n0,n1,n3,n5,n7); }
}
