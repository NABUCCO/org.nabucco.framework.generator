////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////																						////
////	Copyright 2009-2011 PRODYNA AG															////
////																						////
////	Licensed under the Eclipse Public License (EPL), Version 1.0 (the "License");		////
////	you may not use this file except in compliance with the License.					////
////	You may obtain a copy of the License at												////
////																						////
////	http://www.opensource.org/licenses/eclipse-1.0.php or								////
////	http://nabuccosource.org/License.html									////
////																						////
////	Unless required by applicable law or agreed to in writing, software					////
////	distributed under the License is distributed on an "AS IS" BASIS,					////
////	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.			////
////	See the License for the specific language governing permissions and					////
////	limitations under the License.														////
////																						////
////	Project:	    NABUCCO Framework													////
////																						////
////	Author: Frank Ratschinski, Nicolas Moser							 				////
////																						////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

options{    LOOKAHEAD = 1;    DEBUG_PARSER = false;    // DEBUG_TOKEN_MANAGER = true;
    // DEBUG_LOOKAHEAD = true;
        ERROR_REPORTING = false;    // FORCE_LA_CHECK = true;

    STATIC = false;
}

PARSER_BEGIN(NabuccoParser)
package org.nabucco.framework.generator.parser;
	public class NabuccoParser {
	}
PARSER_END(NabuccoParser)

SKIP :
{
   <EOL: "\n" | "\r" | "\r\n" >
|  <SPACECHAR: " " | "\t" | "\f" >
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Single Character Tokens 													                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TOKEN: { 
  < UNDERSCORE_CHAR:	"_" >
| < HASH_CHAR: 			"#" > 
| < LPAREN_CHAR: 		"(" >
| < RPAREN_CHAR: 		")" >
| < LBRACE_CHAR: 		"{" >
| < RBRACE_CHAR: 		"}" >
| < MINUS_CHAR: 		"-" >
| < PLUS_CHAR: 			"+" >
| < ASTERISK_CHAR: 		"*" >
| < SLASH_CHAR: 		"/" >
| < EQUAL_CHAR: 		"=" >
| < GT_CHAR: 			">" >
| < LT_CHAR: 			"<" >
| < GTE_CHAR: 			">=">
| < LTE_CHAR: 			"<=">
| < LBRACKET_CHAR:		"[" >
| < RBRACKET_CHAR: 		"]" >
| < PERCENT_CHAR: 	 	"%" >
| < DOT_CHAR:			"." >
| < COLON_CHAR:			":" >
| < SEMICOLON_CHAR:		";" >
| < SINGLEQUOTE_CHAR:	"'" >
| < PIPE_CHAR:			"|" >
| < COMMA_CHAR:			"," >
| < EXCLAMATION_CHAR:	"!" >
| < QUESTIONMARK_CHAR:	"?" >
| < TILDE_CHAR:			"~" >
| < DOLLAR_CHAR:		"$" >
| < AND_CHAR:			"&" >
| < #UMLAUTE:
      [
       "\u00c4",
       "\u00d6",
       "\u00dc",
       "\u00e4",
       "\u00f6",
       "\u00fc"
      ]
  >
  // \u00c4 -> Ä, \u00d6 -> Ö, \u00dc -> Ü, \u00e4 -> ä, \u00f6 -> ö, \u00fc -> ü
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// NABUCCO Tokens 													                                                 //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TOKEN: {
  < APPLICATION:	"Application" >
| < COMPONENT:		"Component" >
| < ADAPTER:		"Adapter" >
| < BASETYPE:		"Basetype" >
| < DATATYPE:		"Datatype" >
| < ENUMERATION:	"Enumeration" >
| < SERVICE:		"Service" >
| < EXCEPTION:		"Exception" >
| < MESSAGE:		"Message" >
| < CONNECTOR:		"Connector" >
| < SERVICELINK:	"ServiceLink" >
| < EDITVIEW:		"EditView" >
| < LISTVIEW:		"ListView" >
| < SEARCHVIEW:		"SearchView" >
| < COMMAND:		"Command" >
| < PACKAGE:		"package" >
| < IMPORT:			"import" >
| < EXTENDS:		"extends" >
| < VOID:			"void" >
| < THROWS:			"throws" >
| < PUBLIC:			"public" >
| < PROTECTED:		"protected" >
| < PRIVATE:		"private" >
| < ABSTRACT:		"abstract" >
| < PERSISTENT:		"persistent" >
| < TRANSIENT:		"transient" >
| < PARAMETER:		"Parameter" >
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// NABUCCO UI Widget Tokens 													                                     //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TOKEN: {
  < LABELED_INPUT_FIELD:	"LabeledInputField" >
| < LABELED_COMBO_BOX:		"LabeledComboBox" >
| < LABELED_PICKER:			"LabeledPicker" >
| < LABELED_LIST_PICKER:	"LabeledListPicker" >
| < INPUT_FIELD:			"InputField" >
| < COMBO_BOX:				"ComboBox" >
| < PICKER:					"Picker" >
| < LIST_PICKER:			"ListPicker" >
| < COLUMN:					"Column" >
}

TOKEN: {
	< SIMPLE_DATA_TYPE: "String" | "Byte" | "Character" | "Integer" | "Long" | "Float" | "Double" | "Boolean" >
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Literal Tokens 													                                                 //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TOKEN: {
  < #DIGIT: 				["0" - "9"] >
| < #LC_SEQUENCE:      		( ["a"-"z"] )+ >
| < #HC_SEQUENCE:      		( ["A"-"Z","_"] )+ >
| < #LCUC_SEQUENCE:      	["a"-"z"] ( ["a"-"z"] | ["A"-"Z"] )+ >
| < #UCLC_SEQUENCE:      	["A"-"Z"] ( ["a"-"z"] | ["A"-"Z"] )+ >
| < NAME_IDENTIFIER: 	 	<LCUC_SEQUENCE>  >
| < CONSTANT_IDENTIFIER:	<HC_SEQUENCE> >
| < PACKAGE_IDENTIFIER:		<LC_SEQUENCE> ( <DOT_CHAR> <LC_SEQUENCE> )* >
| < UNQUALIFIED_TYPE_NAME: 	<UCLC_SEQUENCE> >
| < QUALIFIED_TYPE_NAME: 	<PACKAGE_IDENTIFIER> <DOT_CHAR> <UNQUALIFIED_TYPE_NAME> >
| < MULTIPLICITY:			<LBRACKET_CHAR> ["0" - "1"] ( <DOT_CHAR> <DOT_CHAR> ("1" | <ASTERISK_CHAR> ) )? <RBRACKET_CHAR> >
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																				                                     //
//	Comments																	                                     //
//																				                                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MORE : {
	"/*": IN_COMMENT
}

< IN_COMMENT > MORE : {
	<  ~[] >
}

< IN_COMMENT > SKIP : {
	"*/": DEFAULT
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																				                                     //
//	Annotations																	                                     //
//																				                                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SKIP: {
	<START_ANNOTATION: "@" > : IN_ANNOTATION
}

< IN_ANNOTATION > SKIP: {
	" " | "\t" | "\f"
}

< IN_ANNOTATION > TOKEN: {
	< #ANNOTATION_PARAM: ~["\n", "\r"] >
|	< ANNOTATION: ( <ANNOTATION_PARAM> )+ >
}
	
< IN_ANNOTATION > SKIP: {
	<END_ANNOTATION: "\n" | "\r" | "\r\n" > : DEFAULT
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																				                                     //
//	Common production rules														                                     //
//																				                                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void NabuccoUnit () :
{}
{
    PackageDeclaration()
    ( ImportDeclaration() )*
    NabuccoStatement()
    <EOF>
}

void PackageDeclaration() :{}{
    <PACKAGE> <PACKAGE_IDENTIFIER> <SEMICOLON_CHAR>
}

void ImportDeclaration() :
{}
{	<IMPORT> <QUALIFIED_TYPE_NAME> <SEMICOLON_CHAR>
}

void AnnotationDeclaration() :
{}
{
    ( <ANNOTATION> )*
}

void ExtensionDeclaration() :
{}
{
    <EXTENDS> ( <UNQUALIFIED_TYPE_NAME> | < QUALIFIED_TYPE_NAME > ) 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																				                                     //
//	Statement production rules													                                     //
//																				                                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void NabuccoStatement() :
{}
{
    (        LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <APPLICATION> )
        ApplicationStatement()
      |
        LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <COMPONENT> )
        ComponentStatement()
      |
        LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <ADAPTER> )
        AdapterStatement()
      |
        LOOKAHEAD(AnnotationDeclaration() <PUBLIC> [ <ABSTRACT> ] <DATATYPE> )
        DatatypeStatement()
      |
        LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <BASETYPE> )
        BasetypeStatement()
      |
        LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <ENUMERATION> )
        EnumerationStatement()
  	  |
        LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <EXCEPTION> )
        ExceptionStatement()
  	  |
  		LOOKAHEAD(AnnotationDeclaration() <PUBLIC> [ <ABSTRACT> ] <SERVICE> )
  		ServiceStatement()
  	  |
  		LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <MESSAGE> )
  		MessageStatement()
 	  |
  		LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <EDITVIEW> )
  		EditViewStatement()
 	  |
  		LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <LISTVIEW> )
  		ListViewStatement()
 	  |
  		LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <SEARCHVIEW> )
  		SearchViewStatement()
	  |
		LOOKAHEAD(AnnotationDeclaration() <PUBLIC> <COMMAND> )
	  	CommandStatement()
    )
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Application Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ApplicationStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <APPLICATION> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>
	
	 ( ApplicationPropertyDeclaration() ) * 
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Component Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ComponentStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <COMPONENT> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>
	
	 ( ComponentPropertyDeclaration() ) * 
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Adapter Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AdapterStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <ADAPTER> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>
	
	 ( ServiceDeclaration() ) * 
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Datatype Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DatatypeStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> [ <ABSTRACT> ] <DATATYPE> <UNQUALIFIED_TYPE_NAME> [ ExtensionDeclaration() ] <LBRACE_CHAR>
	
		( PropertyDeclaration() ) *
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Basetype Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void BasetypeStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <BASETYPE> <UNQUALIFIED_TYPE_NAME> [ ExtensionDeclaration() ] <LBRACE_CHAR>
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Enumeration Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void EnumerationStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <ENUMERATION> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>

	( EnumerationLiteralDeclaration() )*
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Service Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ServiceStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> [ <ABSTRACT> ] <SERVICE> <UNQUALIFIED_TYPE_NAME> [ ExtensionDeclaration() ] <LBRACE_CHAR>

		( ServicePropertyDeclaration() )*
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Message Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MessageStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <MESSAGE> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>
	
		( PropertyDeclaration() ) *
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Exception Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ExceptionStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <EXCEPTION> <UNQUALIFIED_TYPE_NAME> [ ExtensionDeclaration() ] <LBRACE_CHAR>

		( ExceptionParameterDeclaration() ) *
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Connector Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ConnectorStatement() :
{}
{
	AnnotationDeclaration()
	
	<PRIVATE> <CONNECTOR> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>

		( ConnectorPropertyDeclaration() ) *
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// EditView Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void EditViewStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <EDITVIEW> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>

	(		LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <DATATYPE> )
		DatatypeDeclaration()
	  |   
		WidgetDeclaration()
	) *	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// ListView Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ListViewStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <LISTVIEW> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>

	(
		LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <DATATYPE> )
		DatatypeDeclaration()
	  |   
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <COLUMN> )
    	ColumnDeclaration()
	) *
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// SearchView Statement 													                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SearchViewStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <SEARCHVIEW> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>

	(
		LOOKAHEAD(AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <DATATYPE> )
		DatatypeDeclaration()
	  |   
		WidgetDeclaration()
	) *
	
	<RBRACE_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Command Statement 													                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CommandStatement() :
{}
{
	AnnotationDeclaration()
	
	<PUBLIC> <COMMAND> <UNQUALIFIED_TYPE_NAME> <LBRACE_CHAR>

	(
		LOOKAHEAD( AnnotationDeclaration() <PRIVATE> ( <EDITVIEW> | <LISTVIEW> | <SEARCHVIEW> ) )
		ViewDeclaration()
	) *
	
    MethodDeclaration()
	
	<RBRACE_CHAR>
}




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////                                                                                                               ////
//// DECLARATIONS	(Statement Properties)									                                       ////
////                                                                                                               ////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Application Attributes												                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ApplicationPropertyDeclaration() :
{}
{
    (
        LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <COMPONENT> )
	    ComponentDeclaration()
	  |
        LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PRIVATE> ) <CONNECTOR> )
	    ConnectorStatement()
	)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Component Attributes												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ComponentPropertyDeclaration() :
{}
{
    (
        LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <PERSISTENT> ] <DATATYPE> )
    	ComponentDatatypeDeclaration()
	  |
        LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <ENUMERATION> )
	    EnumerationDeclaration()
	  |
        LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <SERVICE> )
	    ServiceDeclaration()
	  |
        LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <COMPONENT> )
	    ComponentDeclaration()
	)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Service Attributes												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ServicePropertyDeclaration() :
{}
{
    (
  	    LOOKAHEAD( AnnotationDeclaration() <PRIVATE> <UNQUALIFIED_TYPE_NAME> )
  	    CustomDeclaration()
	  |
	    LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <SERVICE> )
    	ServiceDeclaration()
  	  |
	    LOOKAHEAD( AnnotationDeclaration() <PUBLIC> ( <VOID> | <UNQUALIFIED_TYPE_NAME>) <NAME_IDENTIFIER> <LPAREN_CHAR> )
	    MethodDeclaration()	)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Connector Attributes												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ConnectorPropertyDeclaration() :
{}
{
    (
		LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <DATATYPE> )
    	DatatypeDeclaration() 
	  |
	    LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <SERVICELINK> )
    	ServiceLinkDeclaration()
	)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Default Attributes (Datatype, Message, etc.)						    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PropertyDeclaration() :
{}
{
    (    	LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <BASETYPE> )
    	BasetypeDeclaration()
  	  |   
		LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <DATATYPE> )
    	DatatypeDeclaration() 
	  |
        LOOKAHEAD( AnnotationDeclaration() ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <ENUMERATION> )
	    EnumerationDeclaration()
	)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Custom Declaration (e.g. Entity Manager)							    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CustomDeclaration() :{}{
    AnnotationDeclaration() 
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> )
    <UNQUALIFIED_TYPE_NAME> <MULTIPLICITY> <NAME_IDENTIFIER>
    <SEMICOLON_CHAR>}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Basetype Declaration												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void BasetypeDeclaration() : 
{}
{
    AnnotationDeclaration() 
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <BASETYPE>
    <UNQUALIFIED_TYPE_NAME> <MULTIPLICITY> <NAME_IDENTIFIER>
    <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Datatype Declaration	(in Components)								    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ComponentDatatypeDeclaration() : 
{}
{
    AnnotationDeclaration() 
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <PERSISTENT> ] <DATATYPE>
  ( <QUALIFIED_TYPE_NAME> | <UNQUALIFIED_TYPE_NAME> ) <MULTIPLICITY> <NAME_IDENTIFIER>
    <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Connector Declaration											    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ConnectorDeclaration() : 
{}
{
    AnnotationDeclaration() 
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <CONNECTOR>
    <UNQUALIFIED_TYPE_NAME> <NAME_IDENTIFIER>
    <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// ServiceLink Declaration											    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ServiceLinkDeclaration() : 
{}
{
    AnnotationDeclaration() 
    <PRIVATE> <SERVICELINK>
    <QUALIFIED_TYPE_NAME> <DOT_CHAR>
    <NAME_IDENTIFIER> <LPAREN_CHAR> <RPAREN_CHAR>
    <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Datatype Declaration	(Default)									    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DatatypeDeclaration() : 
{}
{
    AnnotationDeclaration() 
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <DATATYPE>
  ( <QUALIFIED_TYPE_NAME> | <UNQUALIFIED_TYPE_NAME> ) <MULTIPLICITY> <NAME_IDENTIFIER>
    <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Enumeration Declaration											    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void EnumerationDeclaration() : 
{}
{
    AnnotationDeclaration()
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) [ <TRANSIENT> ] <ENUMERATION>
  ( <QUALIFIED_TYPE_NAME> | <UNQUALIFIED_TYPE_NAME> ) <MULTIPLICITY> <NAME_IDENTIFIER>
    <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Enumeration Literal Declaration									    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void EnumerationLiteralDeclaration() : 
{}
{
    AnnotationDeclaration()
  	<CONSTANT_IDENTIFIER>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Exception Parameter Declaration									    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ExceptionParameterDeclaration() : 
{}
{
    AnnotationDeclaration()
  	<PRIVATE> <PARAMETER> <NAME_IDENTIFIER> <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Component Declaration											    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ComponentDeclaration() : 
{}
{
    AnnotationDeclaration() 
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <COMPONENT> <UNQUALIFIED_TYPE_NAME> <NAME_IDENTIFIER> <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Service Declaration												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ServiceDeclaration() : 
{}
{
    AnnotationDeclaration() 
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> ) <SERVICE> <UNQUALIFIED_TYPE_NAME> <SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Method Declaration												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MethodDeclaration() :
{}
{
    AnnotationDeclaration() 
    <PUBLIC> ( <VOID> | <UNQUALIFIED_TYPE_NAME> ) <NAME_IDENTIFIER> <LPAREN_CHAR>

	ParameterList()

    <RPAREN_CHAR> [ <THROWS> <UNQUALIFIED_TYPE_NAME> ] ( <SEMICOLON_CHAR> | <LBRACE_CHAR> MethodBody() <RBRACE_CHAR> )
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Method Parameters												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ParameterList() : 
{}
{
  ( Parameter() ) *
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Single Parameter													    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Parameter() : 
{}
{
	[ <COMMA_CHAR> ] <UNQUALIFIED_TYPE_NAME>  <NAME_IDENTIFIER> 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Method Body														    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MethodBody() :
{}
{
    Block()
}

JAVACODE
Block Block()
{
	Token tok;
	StringBuffer buffer = new StringBuffer();

	while (getToken(1) != null) {
		tok = getToken(1);
    	if (tok.kind == RBRACE_CHAR) {
			break;
		}

		if (buffer.length() != 0) {
		    buffer.append(' ');		}
		buffer.append(tok.image);
		    
    	getNextToken();
	}

	return new Block(buffer.toString());
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// View Declaration												    	                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ViewDeclaration() :
{}
{
	AnnotationDeclaration()
	<PRIVATE> ( <EDITVIEW> | <LISTVIEW> | <SEARCHVIEW> ) <UNQUALIFIED_TYPE_NAME> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// Widget Declarations	(Deprecated)									                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void WidgetDeclaration() :
{}
{
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <LABELED_INPUT_FIELD> )
    	LabeledInputFieldDeclaration()
  	  |   
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <INPUT_FIELD> )
    	InputFieldDeclaration() 
	  |
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <LABELED_PICKER> )
    	LabeledPickerDeclaration() 
	  |
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <PICKER> )
    	PickerDeclaration() 
	  |
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <LABELED_LIST_PICKER> )
    	LabeledListPickerDeclaration() 
	  |
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <LIST_PICKER> )
    	ListPickerDeclaration() 
	  |
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <LABELED_COMBO_BOX> )
    	LabeledComboBoxDeclaration() 
	  |
    	LOOKAHEAD( AnnotationDeclaration() ( <PRIVATE> ) <COMBO_BOX> )
    	ComboBoxDeclaration() 
}

void LabeledInputFieldDeclaration() :
{}
{
	AnnotationDeclaration()
	<PRIVATE> <LABELED_INPUT_FIELD> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void InputFieldDeclaration() :
{}
{
	AnnotationDeclaration()
	<PRIVATE> <INPUT_FIELD> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void LabeledPickerDeclaration() :
{}
{	AnnotationDeclaration()
	<PRIVATE> <LABELED_PICKER> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void PickerDeclaration() :
{}
{
	AnnotationDeclaration()
	<PRIVATE> <PICKER> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void LabeledListPickerDeclaration() :
{}
{	AnnotationDeclaration()
	<PRIVATE> <LABELED_LIST_PICKER> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void ListPickerDeclaration() :
{}
{
	AnnotationDeclaration()
	<PRIVATE> <LIST_PICKER> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void LabeledComboBoxDeclaration() :
{}
{	AnnotationDeclaration()
	<PRIVATE> <LABELED_COMBO_BOX> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void ComboBoxDeclaration() :
{}
{
	AnnotationDeclaration()
	<PRIVATE> <COMBO_BOX> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}

void ColumnDeclaration() :
{}
{
	AnnotationDeclaration()
	<PRIVATE> <COLUMN> <NAME_IDENTIFIER>
	<SEMICOLON_CHAR>
}


